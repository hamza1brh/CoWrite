// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkId     String   @unique // Clerk user ID
  email       String   @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownedDocuments    Document[] @relation("DocumentOwner")
  collaboratorOn    DocumentCollaborator[]
  comments          Comment[]

  @@map("users")
}

model Document {
  id          String   @id @default(cuid())
  title       String   @default("Untitled Document")
  content     Json?    // Lexical editor state
  coverImage  String?  // Document cover picture
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId       String
  owner         User   @relation("DocumentOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators DocumentCollaborator[]
  comments      Comment[]

  @@map("documents")
}

model DocumentCollaborator {
  id       String @id @default(cuid())
  role     Role   @default(VIEWER)
  joinedAt DateTime @default(now())

  // Relations
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
  @@map("document_collaborators")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}
